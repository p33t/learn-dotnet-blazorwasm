@page "/razorfundamentals"
@using System.Timers
@using Timer = System.Threading.Timer
<h3>Razor Fundamentals</h3>
<p>
    An illustration of Razor fundamentals from
    <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0">Syntax Reference for ASP.NET</a>
    <strong>except that blazor has slightly different rules</strong> as noted.
</p>

<h4>C# Expression</h4>
<p>
    @@ Is used to render C# like this date: @DateTime.Today
    <br/>
    Unless it's a part of some content: <a href="mailto:Support@contoso.com">Support@contoso.com</a>
    <br/>
    Add (parents) for complex expressions: @("Hello " + "World")
    <br/>
    @@ encodes to html too: @RawHtml
    <br/>
    But literal html can be rendered with <del>@@Html.Raw()</del>.. actually, for Blazor is @@((MarkupString).. : @((MarkupString) RawHtml)
</p>

<h4>C# Code Block</h4>
<p>
    @@{..} for blocks that execute in order. Counter is now:
    @{ _counter++; }
    @_counter
    <br/>
    But they can transition back to HTML:
    @{
        _counter++;
        <span> Counter is now @_counter</span>
    }
    <br/>
    Razor tag &lt;text> can be used to render content that has no tags or to control whitespace. E.g.
</p>
<pre>@{
         <span>Using &lt;span> 1.</span>
         <span>Using &lt;span> 2.</span>
     }</pre>
<pre>@{
         <text>Using &lt;text> 1.</text>
         <text>Using &lt;text> 2.</text>
     }</pre>
<p>
    @{
        @:@@: does something similar except for the rest of the current line
    }
</p>

<h4>Control Structures</h4>
<p>
    Various control structures for rendering conditional or collections of content.
    <br/>
    @if (DateTime.Today.Day % 2 == 0)
    {
        @:Even Day
    }
    else
    {
        @:Odd Day
    }
    <br/>
    @for (var i = 0; i < 3; i++)
    {
        @: Loop #@(i + 1).
    }
    <br/>
    @foreach (var ch in "abcdefg")
    {
        @: @(ch).
    }
</p>

<h4>Components over Helpers</h4>
<p>
    Helpers are NOT supported in Blazor.  Components (formerly Razor Components) are the unit of reuse 
    (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0">ref</a>.
</p>

<h4>Try Catch Finally</h4>
<p>
    This throws an exception randomly.  Refresh the page to try again!
    <br/>
    @try
    {
        if (new Random().Next(2) == 1) throw new Exception("Random Exception!");
        @: No exception thrown. <br/>
    }
    catch (Exception ex)
    {
        @: Exception occured:
        <pre>@ex</pre><br/>
    }
    finally
    {
        @: Thank goodness that's over.<br/>
    }
</p>

<h4>Locks</h4>
<p>
    Can serialize execution of critical parts of code with <code>@@lock</code>.
    Later: https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#lock
</p>

<h4>Directives</h4>
<p>To influence view generation.  Are supplied in top level (vs Directive Attributes below)</p>
<p>
    Razor pages generate C# code much like JSP.
    See <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#inspect-the-razor-c-class-generated-for-a-view">How to inspect</a>
</p>

<p>
    @@attribute [AttributeToAddToGeneratedClass]<br/>
    @@function { "C# members" }<br/>
    @@code { "C# members to add to <em>Razor Components</em> only" }<br/>
    &nbsp;Prefered to @@functions (for RCs)<br/>
    @@implements, @@inherits for specific interface/class parents<br/>
    @@layout for specifying the layout for a 'routable' @@page (if default layout is inadequate) or 
    the layout differs from that of other pages in the folder, which may rely on a local `_Imports.razor`
    containing @@layout directive.<br/>
    @@namespace is for placing the resulting class in the given namespace.
    @@page meaning depends on `.cshtml` (razor page) vs `.razor` (razor component).  Later means routable and can handle requests.<br/>
    &nbsp;&nbsp;Can specify route parameters like <code>/my/path/{someArg}</code>
    @@preservewhitespace Override with 'true' to include incidental whitespace (default false).<br/>
    @@using The usual
    
    <br/>
    @@model is only for MVC views and indicates the generic type of the parent 
    RazorPage class (which is &lt;dynamic> by default).  A `@@Model` property is then available.<br/>
    @@section only for MVC views to supply content to different parts of a layout.
    

</p>

<p>
    @inject ISomeService SomeService
    Use @@inject (and maybe @@using) to obtain instances to services.<br/>
    Like SomeService.Hello() = @SomeService.Hello()
</p>

<h4>Directive Attributes</h4>
<p>
    Are supplied in attributes to tags (vs top leve Directives above).<br/>
</p>
<p>
    @@attributes for supplying multiple attributes to a component via dictionaly-like &lt;string, object>.  AKA Attribute Splatting.<br/>
    Womens results...<br/>
    <RaceResult First="Susan" Second="Michelle" Third="Mary"/><br/>
    Mens results...<br/>
    <RaceResult @attributes="@mensResult"/>
</p>

<p>
    @@bind for auto updating a field of property when an input is modified.  Different events can be employed
    and there is a <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0">form validation and binding</a>
    features for better UX.
    <br/>
    This one changes on lost focus: <input @bind="boundedValue" /> Value: @boundedValue
    <br/>
    This on changes on each keystroke: <input @bind="boundedValueOnInput" @bind:event="oninput"/> Value: @boundedValueOnInput
</p>

<p>
    @@on{EVENT} to trigger a (possibly async) method <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/event-handling?view=aspnetcore-5.0#event-argument-types">with args</a>
    at the given event. <input type="checkbox" @onchange="OnCheckboxChange"> @checkboxChangedAt
    <br/>
    @@on{EVENT}:preventDefault to block the default behaviour.  Click does nothing: <input type="checkbox" @onclick:preventDefault>
    <br/>
    @@on{EVENT}:stopPropagation to block event propagation to outer elements.  E.g. <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/event-handling?view=aspnetcore-5.0#stop-event-propagation">click on nested div</a>.
    <br/>
    @@key for distinguishing between elements within a collection of components, or making sure Blazor re-renders a modified object.
    (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#when-to-use-key">ref</a>)
    <br/>
    @@ref for capturing a code reference to a component.  E.g. <input type="text" @ref="_refText"/> <button @onclick="FocusRefText">Focus Text</button>
    <br/>
    @@typeparam for use with genericized components
</p>

<h4>Templated Delegates</h4>
<p>
    A function-oriented UI reuse mechanism.  Doesn't seem to be available in Blazor.
</p>

<h4>Razor Components</h4>
<p>Extra learnings from <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#route-parameters">Razor Syntax</a>.</p>

<ul>
    Supply component parameters:
    <li>event handlers with <code>EventCallback&lt;></code> type</li>
    <li>content with <code>RenderFragment</code> type with caveat for loops (see below)</li>
</ul>

<p>
    <UnecessaryComponent>Hello from a component.  Requires a <code>ChildContent</code> property.</UnecessaryComponent>
    <br/>
    Rendering content into components using the <strong> for loop var</strong> requires a local variable.<br/>
    @for (var i = 0; i < 3; i++)
    {
        var current = i;
        <UnecessaryComponent>#@(current + 1)</UnecessaryComponent>
    }
    <br/>
    But <strong>foreach</strong> doesn't have this problem so using <code>Enumerable.Range</code> is cleaner.<br/>
    @foreach (var current in Enumerable.Range(0, 3))
    {
        <UnecessaryComponent>#@(current + 1)</UnecessaryComponent>
    }
</p>

<p>
    'Attribute Splatting' can be used for convenient supplying of multiple parameters to a component (see above).<br/>
    Capture arbitrary arguments in a dictionary-like parameter using <code>[Parameter(CaptureUnmatchedValues = true)]</code> is also possible.<br/>
    <ArbitraryParametersComponent one="1" two="2" three="3" />
    But beware use with splatting because 'last one wins'...<br/>
    <ArbitraryParametersComponent First="Overwritten Value" @attributes="@mensResult" Third="Retained Value"/>
</p>

<p>
    <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#synchronization-context">SynchronizationContext</a>
    is used to enforce a single logical thread of execution (server or client side).
    To update a component in response to an external event (such as a timer or notification), use <code>InvokeAsync()</code> & <code>StateHasChanged()</code>.
    <UnecessaryComponent @ref="_invokeAsyncDemo">0</UnecessaryComponent><br/>
    ^^^ This isn't working.  Is not incrementing :(<br/>
    @secs<br/>
</p>

<p>
    <code>RenderFragment&lt;T></code> generic version requires a parameter (of type T) to render.  
    Internally that value is accessed with <code>@@context</code> special variable by default of the name alias supplied in 'Context' attribute.<br/>
    Supplying the parameter is done like <code>@@SomeFrag(instOfT)</code>.<br/>
    <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#razor-templates">Razor Templates</a> use them.
    Example usage: <code>bruceTemplate</code>: @bruceTemplate & <code>stringTemplate</code>: @stringTemplate("Some String") 
</p>

<p>
    Static assets are stored in <code>wwwroot</code> and reference via base-relative path '/...'.
    E.G. <a href="/css/app.css" target="_blank">app.css</a>
</p>

<h4>Miscellaneous</h4>
<p>
    @@* Comment *@@
</p>

@code {
    // Why does formatter indent this?
        private const string RawHtml = "<a href='#'>Raw Html</a>";
    private int _counter;
    private readonly Dictionary<string, object> mensResult = new()
    {
        {"First", "John"},
        {"Second", "Joe"},
        {"Third", "Graham"},
    };

    private string boundedValue;
    private string boundedValueOnInput;
    private string checkboxChangedAt;
    
    private void OnCheckboxChange(ChangeEventArgs args)
    {
        checkboxChangedAt = $"Changed to {args.Value} at {DateTime.Now.ToLongTimeString()}";
    }

    private ElementReference _refText;

    private void FocusRefText()
    {
        _refText.FocusAsync();
    }

    // Templated Razor Delegates don't appear to work
    //Func<dynamic, object> petTemplate = @<p>You have a pet named <strong>@item.Name</strong>.</p>;
    // Use 'Razor Templates' instead 
    RenderFragment bruceTemplate = @<text>bruce woz ere</text>;

    RenderFragment<string> stringTemplate = s => @<strong>@s</strong>;
    
    private UnecessaryComponent _invokeAsyncDemo;
    private int secs = 0;

    private async Task NextSec()
    {
        await InvokeAsync(() =>
        {
            secs++;
            // Doesn't work... display remains at 0
            _invokeAsyncDemo.ChildContent = builder =>
            builder.AddContent(0, secs.ToString());
            StateHasChanged();
            // ^^^ This triggers the re-render of the page/component.
            // So if rendering changes the state (like incrementing a counter) it get's weird. I.e. Don't alter state during render.
        });
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        new Timer(async (object stateInfo) =>
        {
            await NextSec();
            Console.WriteLine("Timer at " + DateTime.Now);
        }, null, 1000, 1000);
    }
}